exit
a.seqAsJavaList(tokens).toArray.first._classname
a.seqAsJavaList(tokens).toArray.first
a.seqAsJavaList(tokens).toArray.class
a.seqAsJavaList(tokens).toArray
a.seqAsJavaList(tokens)
as.seqAsJavaList(tokens)
tokens._classname
tokens.methods
tokens.class_name
tokens.class
tokens = proccessor.tokenize(input)
a.java_methods
proccessor.tokenize(input).asJava
a = Rjb.import('scala.collection.JavaConversions')
proccessor.tokenize(input).asJava
proccessor.tokenize(input).toJava
proccessor.tokenize(input)
 bundle exec ruby -Ilib\:test\:spec test/proccessor_test.rb -ntest
exit
a.toArray.each { |a| a.toString }
a = proccessor.tokenize(input)
exit
proccessor.stem(input).toString
proccessor.stem(input)
 exit
proccessor.tokenize(input).toIterator.java_methods
proccessor.tokenize(input).toIterator.each { |a| }
proccessor.tokenize(input).toIterator.each { |A| }
proccessor.tokenize(input).toIterator
proccessor.tokenize(input).java_methods
proccessor.tokenize(input).java_methods.select { |a| a.include? "class" }
proccessor.tokenize(input).methods.select { |a| a.include? "class" }
proccessor.tokenize(input).methods
proccessor.tokenize(input).class_name
proccessor.tokenize(input).each { |a| puts a }
proccessor.tokenize(input).toString
proccessor.tokenize(input).toArray
proccessor.tokenize(input).java_methods
proccessor.tokenize(input).java_method
proccessor
exit
to.toString
bridge.stem(to).toString
bridge.stem(to).toArray
bridge.stem(to)
bridge.stem("Adg")
bridge.stem
bridge.stem(to)
to = bridge.tokenize(txt)
bridge.tokenize(txt).toList.java_methods.select { |a| a.to_s.include?("to") }
bridge.tokenize(txt).toList.java_methods.select { |a| a.to_s.include?("arra") }
bridge.tokenize(txt).toList
bridge.tokenize(txt).toList.toArray
bridge.tokenize(txt).toList.java_methods
bridge.tokenize(txt).toList
bridge.tokenize(txt).toString
bridge.tokenize(txt)
txt = "이 페이지를 2번 방문했습니다. 최근 방문 날짜: 16. 2. 28"
bridge.tokenize("teset. abc.\nadsf\n")
bridge.splitSentences("teset. abc.\nadsf\n").toArray.map { |a| puts a.toString }
bridge.splitSentences("teset. abc.\nadsf\n").toArray.map { |a| put a.toString }
bridge.splitSentences("teset. abc.").toArray.map { |a| p a.toString }
bridge.splitSentences("teset. abc.").toArray.map { |a| put a.toString }
bridge.splitSentences("teset. abc.").toArray.class
bridge.splitSentences("teset. abc.").toArray
bridge.splitSentences("teset. abc.").java_methods
bridge.splitSentences("teset. abc.")
bridge.java_methods
bridge.splitSentence("안녕하세요 더불어 민주당").toArray
bridge.tokenize("안녕하세요 더불어 민주당").toArray
bridge.tokenize("안녕하세요 더불어 민주당").java_methods
bridge.tokenize("안녕하세요 더불어 민주당")
bridge.tokenize("안녕하세요 더불어 민주당").toArray
bridge.token
bridge.methods
bridge.splitSentences("안녕하세요 더불어 민주당").toArray
bridge.splitSentences("안녕하세요 더불어 민주당").java_methods.sort
bridge.
exit
bridge.splitSentences("안녕하세요 더불어 민주당").map
bridge.splitSentences("안녕하세요 더불어 민주당").java_methods.sort
bridge.splitSentences("안녕하세요 더불어 민주당").java_methods.srot
bridge.splitSentences("안녕하세요 더불어 민주당").java_methods
bridge.splitSentences("안녕하세요 더불어 민주당").java_methdos
bridge.splitSentences("안녕하세요 더불어 민주당").toList
bridge.splitSentences("안녕하세요 더불어 민주당").toList.java_methods
bridge.splitSentences("안녕하세요 더불어 민주당").toList.class
bridge.splitSentences("안녕하세요 더불어 민주당").toList.map { |a| a }
bridge.splitSentences("안녕하세요 더불어 민주당").toList.map
bridge.splitSentences("안녕하세요 더불어 민주당")
bridge.splitSentences("안녕하세요 더불어 민주당").toList.class
bridge.splitSentences("안녕하세요 더불어 민주당").toList
bridge.splitSentences("안녕하세요 더불어 민주당").size
bridge.splitSentences("안녕하세요 더불어 민주당").toArray
bridge.splitSentences("안녕하세요 더불어 민주당").java_methods.sort
bridge.splitSentences("안녕하세요 더불어 민주당").java_methods.class
bridge.splitSentences("안녕하세요 더불어 민주당").java_methods
bridge.splitSentences("안녕하세요 더불어 민주당").toArray
bridge.splitSentences("안녕하세요 더불어 민주당").java_methods
bridge.splitSentences("안녕하세요 더불어 민주당")
bridge.java_methods
bridge.methods
bridge.disableStemmer
bridge
bridge.tokenize("안녕하세요 더불어 민주당").toBuffer.toArray
bridge.tokenize("안녕하세요 더불어 민주당").toBuffer
bridge.tokenize("안녕하세요 더불어 민주당").flatten
bridge.tokenize("안녕하세요 더불어 민주당").map
bridge.tokenize("안녕하세요 더불어 민주당").list
bridge.tokenize("안녕하세요 더불어 민주당").List
bridge.tokenize("안녕하세요 더불어 민주당")._classname
bridge.tokenize("안녕하세요 더불어 민주당").class
bridge.tokenize("안녕하세요 더불어 민주당").each
bridge.tokenize("안녕하세요 더불어 민주당").toSeq
bridge.tokenize("안녕하세요 더불어 민주당").head.toString
bridge.tokenize("안녕하세요 더불어 민주당").head
bridge.tokenize("안녕하세요 더불어 민주당").methods
bridge.tokenize("안녕하세요 더불어 민주당").method
bridge.tokenize("안녕하세요 더불어 민주당").count
bridge.tokenize("안녕하세요 더불어 민주당").toString
bridge.tokenize("안녕하세요 더불어 민주당").methods.toArray
bridge.tokenize("안녕하세요 더불어 민주당").methods.class
bridge.tokenize("안녕하세요 더불어 민주당").methods
bridge.tokenize("안녕하세요 더불어 민주당").methods.sort
bridge.tokenize("안녕하세요 더불어 민주당").methods.order
bridge.tokenize("안녕하세요 더불어 민주당").
bridge.tokenize("안녕하세요 더불어 민주당").methods
bridge.tokenize("안녕하세요 더불어 민주당").toString
bridge.tokenize("안녕하세요 더불어 민주당").toMap
bridge.tokenize("안녕하세요 더불어 민주당").toBuffer
bridge.tokenize("안녕하세요 더불어 민주당").toArray
bridge.tokenize("안녕하세요 더불어 민주당").toIterable
bridge.tokenize("안녕하세요 더불어 민주당").toArray
bridge.tokenize("안녕하세요 더불어 민주당").toString
bridge.tokenize("안녕하세요 더불어 민주당")
bridge.stem("안녕하세요 더불어 민주당")
bridge.tokenizeToString("안녕하세요 더불어 민주당")
bridge.tokenize("안녕하세요 더불어 민주당").toArray
bridge.tokenize("안녕하세요 더불어 민주당").toString
bridge.tokenize("안녕하세요 더불어 민주당").class
bridge.tokenize("안녕하세요 더불어 민주당").toList.toArray
bridge.tokenize("안녕하세요 더불어 민주당").toList
bridge.tokenize("안녕하세요 더불어 민주당").toString
bridge.tokenize("안녕하세요 더불어 민주당").toArray
bridge.tokenize("안녕하세요 더불어 민주당").toString
bridge.tokenize("안녕하세요 더불어 민주당")
bridge.normalize("안녕하세욬ㅋㅋㅋㅋ").toString
bridge.normalize("안녕ㅋㅋㅇ들 하신가? ㅋㅋ").toString
bridge.normalize("TEST").toString
bridge.normalize("TEST")
bridge.normalize
bridge.new
bridge
exit
proccessor.bridge
proccessor
proccessor.bridge
proccessor
exit
proccessor
p = proccessor.build
exit
b.normalize("TEST").toString
b.normalize("TEST")
b = proccessor.bridge
exit
a.normalize("test")
a.normaize("test")
a = proccessor.bridge
processor.bridge
